import{_ as n,p as s,q as a,a1 as e}from"./framework-9d7a10f9.js";const t={},p=e(`<h1 id="nodejs基础" tabindex="-1"><a class="header-anchor" href="#nodejs基础" aria-hidden="true">#</a> NodeJS基础</h1><h2 id="node-js-简介" tabindex="-1"><a class="header-anchor" href="#node-js-简介" aria-hidden="true">#</a> Node.js 简介：</h2><p>Node.js 诞生于 2009 年，由 Joyent 的员工 Ryan Dahl 开发而成，之后 Joyent 公司一直扮演着 Node.js 孵化者的角色。由于诸多原因，Ryan 在2012年离开社区。<br> Node.js 不是一门语言也不是框架，它只是基于 Google V8 引擎的 JavaScript 运行时环境，同时结合 Libuv 扩展了 JavaScript 功能，使之支持 io、fs 等只有语言才有的特性，使得 JavaScript 能够同时具有 DOM 操作(浏览器)和 I/O、文件读写、操作数据库(服务器端)等能力，是目前最简单的全栈式语言。</p><h3 id="什么是node-js" tabindex="-1"><a class="header-anchor" href="#什么是node-js" aria-hidden="true">#</a> 什么是Node.js？</h3><ul><li>Node.js不是Javascript应用，不是语言（JavaScript 是语言），不是像 Rails(Ruby)、 Laravel(PHP) 或 Django(Python) 一样的框架，也不是像 Nginx 一样的 Web 服务器。Node.js 是 JavaScript 运行时环境</li><li>构建在 Chrome’s V8 这个著名的 JavaScript 引擎之上，Chrome V8 引擎以 C/C++ 为主，相当于使用JavaScript 写法，转成 C/C++ 调用，大大的降低了学习成本</li><li>事件驱动（event-driven），非阻塞 I/O 模型（non-blocking I/O model），简单点讲就是每个函数都是异步的，最后由 Libuv 这个 C/C++ 编写的事件循环处理库来处理这些 I/O 操作，隐藏了非阻塞 I/O 的具体细节，简化并发编程模型，让你可以轻松的编写高性能的Web应用，所以它是轻量（lightweight）且高效（efficient）的</li><li>使用 npm 作为包管理器，目前 npm 是开源库里包管理最大的生态，功能强大</li></ul><h3 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理" aria-hidden="true">#</a> 基本原理</h3><p>Node.js是基于Chrome V8引擎构建的，由事件循环（Event Loop）分发I/O任务，最终工作线程（Work Thread）将任务丢到线程池（Thread Pool）里去执行，而事件循环只要等待执行结果就可以了。</p><h4 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念：</h4><ul><li>Chrome V8是Google发布的开源Javascript解释器，采用C/C++编写，在Google的Chrome浏览器中使用。Chrome V8引擎可以单独运行，也可以用来嵌入到C/C++应用程序中执行。</li><li>Event Loop 事件循环</li><li>Thread Pool 线程池</li></ul><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结：</h4><ul><li>Chrome V8 是 JavaScript 引擎</li><li>Node.js 内置 Chrome V8 引擎，所以它使用的 JavaScript 语法</li><li>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事</li><li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</li><li>如果排队是因为计算量大，CPU 忙不过来，倒也算了，但是很多时候 CPU 是闲着的，因为 I/O 很慢，不得不等着结果出来，再往下执行</li><li>CPU 完全可以不管 I/O 设备，挂起处于等待中的任务，先运行排在后面的任务</li><li>将等待中的 I/O 任务放到 Event Loop 里</li><li>由 Event Loop 将 I/O 任务放到线程池里</li><li>只要有资源，就尽力执行</li></ul><h3 id="node-js应用场景" tabindex="-1"><a class="header-anchor" href="#node-js应用场景" aria-hidden="true">#</a> Node.js应用场景</h3><h4 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景：</h4><ol><li>跨平台：覆盖面向用户的所有平台，前端（Web+h5），移动端（hybrid），PC客户端</li><li>Node后端：Web应用，API，RPC服务等</li><li>前端：React/Vue/Angular 辅助开发，以及工程化使用Gulp,Webpack构建Web开发工具</li><li>工具：npm上各种工具模块，包括各种前端预编译(Sass,Less)、构建工具(Gulp,Webpack)、脚手架，命令行工具等</li></ol><h4 id="应用场景氛围" tabindex="-1"><a class="header-anchor" href="#应用场景氛围" aria-hidden="true">#</a> 应用场景氛围：</h4><ol><li>Server端</li><li>命令行辅助工具</li><li>移动端：cordova，PC端：nw.js和electron模块</li><li>组件化，构建，代理</li><li>架构，前后端分离，api proxy</li><li>性能优化、反爬虫与爬虫</li></ol><h3 id="包管理器-npm" tabindex="-1"><a class="header-anchor" href="#包管理器-npm" aria-hidden="true">#</a> 包管理器 npm</h3><p>npm可以自动管理包的依赖，只需要安装你想要的包，不必考虑这个包的依赖包</p><h3 id="模块的使用" tabindex="-1"><a class="header-anchor" href="#模块的使用" aria-hidden="true">#</a> 模块的使用</h3><p>模块系统部分主要有三大主要内容：核心模块的引入，第三方模块引入，个人私有模块引入<br> 通过Node.js的官方API可以看到Node.js本身提供了很多核心模块，这些核心模块被编译成二进制文件，可以require(&#39;模块名&#39;)去获取；核心模块具有最高的加载优先级（有模块与核心模块同名时会体现）<br> Node.js还有一类模块为文件模块，可以是JavaScript代码文件（.js作为文件后缀）、也可以是JSON格式文本文件（.json作为文件后缀）、还可以是编辑过的C/C++文件（.node作为文件后缀）；<br> 文件模块访问方式通过require(&#39;/文件名.后缀&#39;) require(&#39;./文件名.后缀&#39;) requrie(&#39;../文件名.后缀&#39;) 去访问，文件后缀可以省略；以&quot;/&quot;开头是以绝对路径去加载，以&quot;./&quot;开头和以&quot;../&quot;开头表示以相对路径加载，而以&quot;./&quot;开头表示同级目录下文件，前面提到文件后缀可以省略，Nodejs尝试加载的优先级 js文件 &gt; json文件 &gt; node文件</p><h4 id="引入核心模块" tabindex="-1"><a class="header-anchor" href="#引入核心模块" aria-hidden="true">#</a> 引入核心模块</h4><p>Node已经核心了很多实用模块，使用require实现模块导入。通过模块名作为参数，该命令就能成功的返回对应的模块。大多数情况下，返回的对象是一个object对象，但有时也可能会是字符串、数字或者函数。在绝大多数时候我们在引入模块的时候会用一个同名的变量来接受返回的模块对象。</p><h4 id="使用npm和package-json引入第三方模块" tabindex="-1"><a class="header-anchor" href="#使用npm和package-json引入第三方模块" aria-hidden="true">#</a> 使用npm和package.json引入第三方模块</h4><p>npm 是Node的包管理器，一般使用npm install 完成所有依赖的安装，除了安装依赖项外，npm还能完成其他任务。比如生产package.json文件。如果项目使用了第三方模块，那么其中必定存在package.json文件。package.json一般定义项目名称、版本号、作者，以及项目的外部依赖等等。</p><h4 id="实现私有模块" tabindex="-1"><a class="header-anchor" href="#实现私有模块" aria-hidden="true">#</a> 实现私有模块</h4><p>开发一个私有模块。每个模块只能暴露一个变量，而且必须通过<code>module.exports</code>设置,<code>module.exports</code>可以暴露任何变量，通常都会是一个对象，也可以暴露字符串或数组。<br> 使用时处理需要通过点语法指定相对路径之外，其余部分与前面几乎一模一样。</p><h4 id="exports和module-exports的区别" tabindex="-1"><a class="header-anchor" href="#exports和module-exports的区别" aria-hidden="true">#</a> exports和module.exports的区别</h4><p>module.exports才是真正的接口，exports只不过是它的一个辅助工具。　最终返回给调用的是module.exports而不是exports。<br> 所有的exports收集到的属性和方法，都赋值给了Module.exports。当然，这有个前提，就是module.exports本身不具备任何属性和方法。<br> 如果，module.exports已经具备一些属性和方法，那么exports收集来的信息将被忽略。 最好别分别定义module.exports和exports；NodeJs开发者建议导出对象用module.exports,导出多个方法和变量用exports</p><h4 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h4><p>模块在第一次加载后会被缓存。模块是基于其解析的文件名进行缓存的。这也意味着（类似其他缓存机制）如果每次调用 require(&#39;foo&#39;) 都解析到同一文件，则返回相同的对象。<br> 多次调用 require(foo) 不会导致模块的代码被执行多次。 这是一个重要的特性。 借助它, 可以返回“部分完成”的对象，从而允许加载依赖的依赖, 即使它们会导致循环依赖。<br> 如果想要多次执行一个模块，可以导出一个函数，然后调用该函数。所以实际应用中模块被引入后需要执行函数。</p><h3 id="端口" tabindex="-1"><a class="header-anchor" href="#端口" aria-hidden="true">#</a> 端口</h3><p>端口的作用：通过端口来区分出同一电脑内不同应用或者进程，从而实现一条物理网线（通过分组交换技术）同时链接多个程序 端口号是一个16位的uint，所以其范围为<code>1</code> to <code>65535</code> (对TCP来说, port 0 被保留，不能被使用. 对于UDP来说, source端的端口号是可选的， 为0时表示无端口)</p><h2 id="mysql安装后遇到的问题" tabindex="-1"><a class="header-anchor" href="#mysql安装后遇到的问题" aria-hidden="true">#</a> MySQL安装后遇到的问题</h2><h4 id="navicat-for-mysql报错1251连接不成功mysql" tabindex="-1"><a class="header-anchor" href="#navicat-for-mysql报错1251连接不成功mysql" aria-hidden="true">#</a> Navicat for Mysql报错1251连接不成功Mysql</h4><div class="custom-container warning"><p class="custom-container-title">注意</p><p>Mysql安装后需要新建用户名密码，否则在Navicat连接不成功Mysql，报错1251错误。</p></div><h4 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法" aria-hidden="true">#</a> 解决办法：</h4><ol><li>打开Command Line Client，输入mysql密码回车</li><li>输入ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;mysql的密码&#39;;回车 别漏了后面有个分号 mysql的密码是安装mysql时设置的密码</li><li>输入FLUSH PRIVILEGES;回车 别漏了后面的分号。也可以通过此方法修改mysql密码</li></ol><div class="custom-container warning"><p class="custom-container-title">注意</p><p>mysql 新设置用户或更改密码后需用flush privileges刷新MySQL的系统权限相关表，否则会出现拒绝访问，还有一种方法，就是重新启动mysql服务器，来使新设置生效。­</p></div><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h2><h3 id="commonjs-规范" tabindex="-1"><a class="header-anchor" href="#commonjs-规范" aria-hidden="true">#</a> CommonJS 规范</h3><p>Javascript缺少的功能：</p><ul><li>Javascript没有模块系统。没有原生的支持密闭作用域或依赖管理。</li><li>JavaScript 没有标准库。除了一些核心库外，没有文件系统的 API，没有 IO 流 API 等。</li><li>JavaScript 没有标准接口。没有如 Web Server 或者数据库的统一接口。</li><li>JavaScript 没有包管理系统。不能自动加载和安装依赖。</li></ul><p>有需求就有相应的解决方案，CommonJS规范出现了，其目标是为了构建 JavaScript 在包括 Web 服务器，桌面，命令行工具，及浏览器方面的生态系统。</p><p>Node 就是使用的CommonJS规范，Node自身实现了require方法作为引入模块的方法，同时NPM也基于CommonJS规范，实现依赖管理和模块自动安装等功能。</p><h3 id="模块载入机制" tabindex="-1"><a class="header-anchor" href="#模块载入机制" aria-hidden="true">#</a> 模块载入机制</h3><p>Node 模块分为两类，一类为原生（核心）模块，一类为文件模块。原生模块在 Node.js 源代码编译的时候编译进了二进制执行文件，加载的速度最快。另一类文件模块是动态加载的，加载速度比原生模块慢。但是 Node.js 对原生模块和文件模块都进行了缓存，于是在第二次 require 时，是不会有重复开销的。其中原生模块都被定义在 lib 这个目录下面，文件模块则不定性。</p><p>文件模块又分为3种：</p><ul><li>.js 通过 fs 模块同步读取 js 文件并编译执行。</li><li>.node 通过 C/C++ 进行编写的 Addon。通过 dlopen 方法进行加载。</li><li>.json 读取文件，调用 JSON.parse 解析加载。</li></ul><h3 id="fs模块" tabindex="-1"><a class="header-anchor" href="#fs模块" aria-hidden="true">#</a> fs模块</h3><p>fs模块是唯一一个同时提供同步和异步API的模块。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取当前目录的文件列表</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>files</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="理解什么是流-stream" tabindex="-1"><a class="header-anchor" href="#理解什么是流-stream" aria-hidden="true">#</a> 理解什么是流（stream）</h3><p>我们知道console.log会输出到控制台。事实上，console.log内部做的事情：它在指定的字符串加上\\n(换行)字符，并将其写到stdout流中。</p><p>** process对象用于处理与当前进程相关的事情，它是一个全局对象，可以在任何地方直接访问到它而无需引入额外模块。 它是 EventEmitter 的一个实例。 **</p><p>** process全局对象中包含三个流对象，分别对应三个UNIX标准流 **</p><h4 id="process-stdout" tabindex="-1"><a class="header-anchor" href="#process-stdout" aria-hidden="true">#</a> process.stdout</h4><p>一个指向标准输出流(stdout)的 可写的流(Writable Stream):</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>另外可以使用process.stdout.isTTY来判断当前是否处于TTY上下文</p><h4 id="process-stderr" tabindex="-1"><a class="header-anchor" href="#process-stderr" aria-hidden="true">#</a> process.stderr</h4><p>一个指向标准错误流(stderr)的 可写的流(Writable Stream):</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;输出一行标准错误流，效果跟stdout没差&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="process-stdin" tabindex="-1"><a class="header-anchor" href="#process-stdin" aria-hidden="true">#</a> process.stdin</h4><p>一个指向 标准输入流(stdin) 的可读流(Readable Stream)。标准输入流默认是暂停 (pause) 的，所以必须要调用 process.stdin.resume() 来恢复 (resume) 接收:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">gets</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//输入进入流模式（flowing-mode，默认关闭，需用resume开启），注意开启后将无法read到数据</span>
    <span class="token comment">//见 https://github.com/nodejs/node-v0.x-archive/issues/5813</span>
    process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//去掉下一行可一直监听输入，即保持标准输入流为开启模式</span>
        process<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">cb</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;试着在键盘敲几个字然后按回车吧&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">gets</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reuslt</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;[&quot;</span><span class="token operator">+</span>reuslt<span class="token operator">+</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//process.stdin.emit(&#39;end&#39;); //触发end事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="process-cwd" tabindex="-1"><a class="header-anchor" href="#process-cwd" aria-hidden="true">#</a> process.cwd</h4><p>返回当前进程的工作目录:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前目录：&#39;</span> <span class="token operator">+</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前目录：E:\\github\\nodeAPI\\process</span>
</code></pre></div><h4 id="process-argv" tabindex="-1"><a class="header-anchor" href="#process-argv" aria-hidden="true">#</a> process.argv</h4><p>返回当前命令行指令参数 ，但不包括node特殊(node-specific) 的命令行选项（参数）。常规第一个元素会是 &#39;node&#39;， 第二个元素将是 .Js 文件的名称。接下来的元素依次是命令行传入的参数：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 打印Node程序运行时的参数值，将数组的前两项去掉</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h4 id="process-chdir-directory" tabindex="-1"><a class="header-anchor" href="#process-chdir-directory" aria-hidden="true">#</a> process.chdir(directory)</h4><p>改变进程的当前进程的工作目录（该目录必须已存在），若操作失败则抛出异常：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前目录：&#39;</span> <span class="token operator">+</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前目录：E:\\github\\nodeAPI\\process</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    process<span class="token punctuation">.</span><span class="token function">chdir</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;tmp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;新目录：&#39;</span> <span class="token operator">+</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//新目录：E:\\github\\nodeAPI\\process\\tmp</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;chdir: &#39;</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="process-exit-code" tabindex="-1"><a class="header-anchor" href="#process-exit-code" aria-hidden="true">#</a> process.exit([code])</h4><p>终止当前进程并返回给定的 code。如果省略了 code，退出是会默认返回成功的状态码(&#39;success&#39; code) 也就是 0：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// node的shell将捕获到值为1的返回码</span>
</code></pre></div><h4 id="process-exitcode" tabindex="-1"><a class="header-anchor" href="#process-exitcode" aria-hidden="true">#</a> process.exitCode</h4><p>可以自定义退出进程时node shell捕获到的状态码（必须是正常结束进程或者使用process.exit()指令退出）</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span>exitCode <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="ansi转义码" tabindex="-1"><a class="header-anchor" href="#ansi转义码" aria-hidden="true">#</a> ANSI转义码</h3><p>要在文本终端下控制格式、颜色以及其他输出选项，可以使用ANSI转义码。</p>`,82),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","nodejs基础.html.vue"]]);export{u as default};
